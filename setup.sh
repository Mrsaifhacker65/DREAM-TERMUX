#!/bin/bash
clear
# Backup existing bash.bashrc
output="/data/data/com.termux/files/usr/etc/"
if [ -f "${output}bash.bashrc" ]; then
    mv "${output}bash.bashrc" "${output}bash.bashrc.bak"
    echo -e "\033[1;32mExisting bash.bashrc backed up as bash.bashrc.bak\033[0m"
fi

# Update and upgrade packages
echo -e "\033[1;35mUpdating and upgrading packages...\033[0m"
apt update && apt upgrade -y

termux-setup-storage 

cp typing.mp3 /sdcard

# Ask the user if they want to visit the GitHub page
echo -e "\033[1;35mDo you want to visit my GitHub page? (y/n)\033[0m"
read -p "Enter your choice: " choice

# Check the user's input
if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
    echo -e "\033[1;35mRedirecting to GitHub...\033[0m"
    termux-open-url https://github.com/Mrsaifhacker65
else
    echo -e "\033[1;32mYou chose not to visit GitHub. Exiting...\033[0m"
fi
clear

# Function to display progress bar
progress_bar() {
    local percent=0  # Initialize the percent variable
    echo -e "\033[1;35m$1\033[0m"
    sleep 1
    while [ $percent -le 100 ]; do
        echo -ne "["
        for ((i=0; i<percent; i+=2)); do echo -n "="; done
        for ((i=percent; i<100; i+=2)); do echo -n " "; done
        echo -n "] $percent%\r"
        sleep 0.1
        ((percent+=2))
    done
    echo ""
}

# Function to install a package and check for success
install_package() {
    pkg install -y $1 &>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "\033[1;32m$1 installed successfully!\033[0m"
    else
        echo -e "\033[1;31mError: Failed to install $1\033[0m"
        exit 1
    fi
}

# Function to install gem and check for success
install_gem() {
    gem install $1 &>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "\033[1;32m$1 gem installed successfully!\033[0m"
    else
        echo -e "\033[1;31mError: Failed to install $1 gem\033[0m"
        exit 1
    fi
}

# Begin installation
echo -e "\033[1;36mStarting the installation process...\033[0m"

# Install figlet, python2, and ruby
progress_bar "Installing mpv, figlet, python2, and ruby packages..."
install_package "mpv"
install_package "figlet"
install_package "python2"
install_package "ruby"

# Install lolcat gem
progress_bar "Installing lolcat gem..."
install_gem "lolcat"

# Finish
echo -e "\033[1;32mInstallation completed successfully!\033[0m"

# Set output path
output="/data/data/com.termux/files/usr/etc/"

# Ask for user input (name)
clear
echo -e "\n\n\n\n\t\033[1;35m Input Your Name üëâ : \c"
read name
echo
echo
echo

# Create the Python welcome script
cat <<EOF > "${output}wlc.py"
import os, sys, time, random
import subprocess  # To run the mpv command

# Play typing.mp3 silently in the background
subprocess.Popen(["mpv", "--no-terminal", "--loop=inf", "/sdcard/typing.mp3"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

# Typing welcome message
print("")
color = ["\\033[1;32m", "\\033[1;32m"]
m = random.choice(color) + " Welcome To TermuX ~ (‚óï‚Äø‚óï)‚òû '$name' \\n"
for msg in m:
    sys.stdout.write(msg)
    sys.stdout.flush()
    time.sleep(0.2)

# Stop the mpv sound after the message finishes
os.system("pkill mpv")
print("")
EOF

# Create bash.bashrc content
cat << 'EOF' > "${output}bash.bashrc"
clear
echo
echo "  < ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ [‚òÖ] T E R M U X [‚òÖ] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ >   " | lolcat
echo "  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" | lolcat
echo "  ‚îÇ     Developed By - Mr.Saif Hacker....‚öî      ‚îÇ" | lolcat
echo "  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" | lolcat
echo "                ‚£Ä‚£§‚£§‚†∂‚†∂‚†ö‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†∑‚†∂‚¢¶‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚†û‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†ª‚¢∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚£†‚°æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚°§‚†§‚†§‚¢§‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä ‚†Ä‚†Ä‚¢Ä‚£¥‚†è‚†Ä‚¢Ä‚£Ä‚£†‚£∂‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚£†‚†¥‚†Ä‚¢Ä‚†î‚†ã‚¢Å‚†é‚†Ä‚°á‚†ò‚°Ñ‚†â‚†≤‚£ç‚†ë‚†¢‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚£¶‚£§‚°Ä‚†Ä‚†ô‚£∑‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä ‚†Ä‚¢Ä‚£æ‚†É‚†Ä‚£¥‚†è‚£º‚°ø‚££‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚††‚¢Ñ‚°¥‚†É‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚†É‚†Ä‚†π‚°Ñ‚†Ä‚†à‚¢≥‚°Ä‚†§‚†ò‚†¢‚°Ä‚†Ä‚†Ä‚¢æ‚¢ª‚£∑‚°ò‚£¶‚°Ä‚†à‚¢ø‚°Ñ‚†Ä‚†Ä
 ‚†Ä‚†Ä‚£æ‚†Å‚£†‚¢∫‚£ø‚¢ò‚£≠‚£æ‚†É‚†Ä‚°∞‚†ã‚†Ä‚†Ä‚¢Ä‚°ú‚†Å‚†Å‚†Ä‚¢∫‚†Ä‚£¥‚£û‚°≥‚£∂‚°Ñ‚†Å‚†Ä‚†â‚†Ä‚†±‚°Ñ‚†Ä‚†Ä‚†à‚†¢‚°Ä‚†à‚¢∑‚£¨‚°ì‚¢ª‚£∑‚¢¶‚†à‚¢ø‚°Ñ‚†Ä
 ‚†Ä‚£º‚†É‚¢∞‚°á‚¢∏‚£∑‚°ø‚¢ª‚†Å‚¢Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†à‚†Å‚£∑‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚°Ä‚†Ä‚†Ä‚†Ä‚†±‚°Ñ‚†Ä‚¢ø‚¢ø‚£æ‚°ø‚¢∏‚£ß‚†à‚£∑‚†Ä
 ‚¢†‚°ü‚†Ä‚£æ‚£ø‚¢∏‚£´‚£∂‚†á‚†Ä‚°û‚†Ä‚†Ä‚†í‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†É‚††‚†Ä‚†Ä‚†Ä‚¢π‚°Ä‚†ò‚£∑‚£å‚†ß‚¢∏‚£ø‚†Ä‚¢∏‚°á
 ‚£º‚°á‚£∞‚¢ª‚£ø‚£∏‚°ø‚†ã‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ª‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ß‚†Ä‚¢∏‚£ø‚£ß‚£º‚°ø‚¢Ä‚†Ä‚£∑
 ‚£ø‚†Ä‚£ø‚°Ä‚¢ø‚°ü‚¢°‚°á‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ‚†∏‚£Ü‚†ª‚£ø‚†É‚£º‚†Ä‚¢ø
 ‚£ø‚†Ä‚¢ø‚£∑‚†ò‚¢∞‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£∂‚°ü‚†Ä‚£π‚£Ø‚°Å‚¢∏‚£∑‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Å‚†Ä‚¢ø‚£¶‚†ô‚£º‚£ø‚†Ä‚¢∏
 ‚£ø‚†Ä‚†ò‚£ø‚£á‚£ø‚°è‚°Ñ‚†Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚¢∞‚£á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚¢Ä‚†∏‚£ø‚¢∞‚£ø‚†á‚†Ä‚£æ
 ‚¢ª‚°á‚£∑‚°à‚¢ª‚£ø‚¢Ä‚£ø‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Ä‚£º‚°Ü‚¢ø‚°ø‚†É‚£º‚†Ä‚£ø
 ‚†ò‚£ß‚†ò‚£ø‚£¶‚°ô‚¢∏‚£ø‚£¶‚°Ä‚¢£‚†Ä‚°†‚†§‚†í‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢∏‚£ø‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†í‚†¢‚†§‚£Ä‚£∞‚†Å‚°∞‚£ø‚°á‚¢ö‚£¥‚£æ‚†è‚¢∏‚°á
 ‚†Ä‚¢ª‚°Ñ‚¢à‚†ª‚£ø‚£º‚£ø‚°á‚£∑‚°à‚¢¶‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚°∞‚¢É‚£º‚†Å‚£ø‚£ß‚£æ‚°ø‚°É‚¢Ä‚°ø‚†Ä
 ‚†Ä‚†à‚¢ø‚°Ä‚¢∑‚£å‚†õ‚¢ø‚£ß‚¢∏‚£∑‚°Ä‚†ë‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ú‚†Å‚£º‚°ü‚¢∏‚°ø‚†ü‚£â‚°¥‚†É‚£º‚†É‚†Ä
 ‚†Ä‚†Ä‚†à‚¢ø‚°Ñ‚†ª‚¢ø‚£∂‚£¨‚£Å‚¢ø‚£ß‚¢≥‚£Ñ‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£†‚°ñ‚£π‚£ø‚¢É‚£•‚£¥‚£æ‚†ü‚¢Å‚£º‚†É‚†Ä‚†Ä
‚†Ä ‚†Ä‚†Ä‚†à‚¢ª‚£Ü‚†Ä‚¢ù‚†ª‚†ø‚¢ø‚£ø‚£¶‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£∞‚£ø‚°ø‚†ø‚†ü‚£ã‚†Å‚¢†‚°æ‚†É‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†ô‚¢∑‚°Ä‚†ô‚†∂‚£∂‚£§‚£§‚£•‚£¨‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£º‚£•‚£§‚£∂‚°∂‚†õ‚¢Å‚£¥‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†ª‚¢¶‚£Ä‚†Ä‚¢≠‚£â‚£ô‚£â‚£â‚£Å‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£å‚£â‚£â‚£ã‚£â‚°©‚†Å‚¢Ä‚£¥‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†∑‚£§‚°à‚†ô‚†õ‚†ª‚†õ‚†õ‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚¢â‚£†‚°∂‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∑‚£¶‚£Ñ‚£Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚¢Ä‚£Ä‚£§‚†∂‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†õ‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†â      " |lolcat

echo "  < ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ [‚òÖ]MR.SAIFHACKER[‚òÖ] ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ > " |lolcat
echo
python /data/data/com.termux/files/usr/etc/wlc.py
if [ -x /data/data/com.termux/files/usr/libexec/termux/command-not-found ]; then
    command_not_found_handle() {
        /data/data/com.termux/files/usr/libexec/termux/command-not-found "$1"
    }
fi
EOF
cat <<EOF >> "${output}bash.bashrc"
PS1="\033[1;32m‚îå‚îÄ[\033[1;31m${name}@termux\033[1;32m]‚îÄ[\033[1;35m\w\033[1;32m]\n\033[1;32m‚îî‚îÄ‚û§ \033[0m"
EOF

# Final Message
echo -e "\033[1;32mSetup completed! \033[0m"
echo
cat letter.txt
echo
echo
echo " EXIT FROM TERMUX AND RE OPEN IT AFTER 2 SECONDS " |lolcat
echo
echo
# Add final message about reverting
echo
echo -e "\033[1;32mTo restore TermuX to its original state, run: ./revert.sh\033[0m"
echo
echo